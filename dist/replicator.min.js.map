{"version":3,"sources":["replicator.min.js"],"names":["getAllTraitProps","factoryName","buildProps","traitProps","traitNames","_","map","val","key","each","propName","matchedTrait","getPropsForOneTrait","isObject","extend","enforce","definedProps","props","propsMinusBuildLength","keys","difference","xor","length","Error","join","getDefinedProps","sharedRegistry","getOverrideProps","pickBy","propVal","trait","sharedTraits","evaluateDynamicProperties","count","isFunction","calculateProps","overrideProps","config","factoryCounts","define","isString","traitName","factory","makeFactory","copies","result","range","push","embed","Replicator","build","this","opts","window"],"mappings":"CAAA,WACE,YAUA,SAASA,GAAiBC,EAAaC,GACrC,GAAIC,MAEAC,EAAaC,EAAEC,IAAIJ,EAAY,SAASK,EAAKC,GAAO,MAAID,MAAQ,EAAeC,EAA3B,QAOxD,OANAH,GAAEI,KAAKL,EAAY,SAASM,GAC1B,GAAIC,GAAeC,EAAoBX,EAAaS,EAC/CL,GAAEQ,SAASF,IACdN,EAAES,OAAOX,EAAYQ,KAGlBR,EAGT,QAASY,GAAQC,EAAcb,EAAYc,EAAOhB,GAChD,GAAIiB,GAAwBb,EAAEc,KAAKd,EAAES,UAAWE,EAAcb,IAE1DiB,EAAaf,EAAEgB,IAAIH,EAAuBb,EAAEc,KAAKF,GACrD,IAAIG,EAAWE,OACb,KAAM,IAAIC,OACR,wCACAH,EAAWI,KAAK,KAChB,0BACAvB,GAKN,QAASwB,GAAgBxB,GACvB,MAAOyB,GAAezB,GAGxB,QAAS0B,GAAiB1B,EAAagB,GACrC,MAAOZ,GAAEuB,OAAOX,EAAO,SAASY,EAASnB,GACvC,OAAQE,EAAoBX,EAAaS,KAI7C,QAASE,GAAoBX,EAAa6B,GAGxC,MADAC,GAAa9B,GAAe8B,EAAa9B,OAClC8B,EAAa9B,GAAa6B,GAGnC,QAASE,GAA0Bf,EAAOgB,GACxC5B,EAAEI,KAAKQ,EAAO,SAASY,EAASnB,GAC3BL,EAAE6B,WAAWL,KACdZ,EAAMP,GAAYmB,EAAQZ,EAAOgB,MAKvC,QAASE,GAAelC,EAAaC,GACnC,GAAIc,GAAeS,EAAgBxB,GAC/BE,EAAaH,EAAiBC,EAAaC,GAC3CkC,EAAgBT,EAAiB1B,EAAaC,GAE9Ce,EAAQZ,EAAES,UAAWE,EAAcb,EAAYiC,EAC/CC,GAAOtB,SACTA,EAAQC,EAAcb,EAAYc,EAAOhB,EAG3C,IAAIgC,GAAQK,EAAcrC,EAK1B,OAJA+B,GAA0Bf,EAAOgB,GAEjCK,EAAcrC,KAEPgB,EAGT,QAASsB,GAAOtC,EAAagB,GAC3B,IAAMZ,EAAEmC,SAASvC,GAAiB,KAAM,IAAIsB,OAAM,8BAElDN,GAAQA,KAER,IAAIa,GAAQ,SAAUW,EAAWtC,GAK/B,MAFA4B,GAAa9B,GAAe8B,EAAa9B,OACzC8B,EAAa9B,GAAawC,GAAatC,EAChCuC,GAGLA,GACFZ,MAAOA,EAQT,OAJAJ,GAAezB,GAAegB,EAC9BqB,EAAcrC,GAAe,EAC7B8B,EAAa9B,MAENyC,EAGT,QAASC,GAAY1C,EAAagB,EAAO2B,GAEvC,GADAA,EAASA,GAAU,GACbvC,EAAEmC,SAASvC,GACf,KAAM,IAAIsB,OAAM,8BAElB,KAAMG,EAAezB,GACnB,KAAM,IAAIsB,OAAM,eAAkBtB,EAAc,4BAGlD,IAAI4C,KAOJ,OANAxC,GAAEI,KAAKJ,EAAEyC,MAAMF,GAAS,WACtBC,EAAOE,KAAKZ,EAAelC,EAAagB,MAG3B,IAAX2B,IAAgBC,EAASA,EAAO,IAE7B,SAAST,GACd,MAAOA,GAAgBO,EAAY1C,EAAamC,KAAmBS,GAIvE,QAASG,GAAM/C,EAAagB,EAAO2B,GACjC,MAAO,YACL,MAAOK,GAAWC,MAAMjD,EAAagB,EAAO2B,IA7HhD,GAAIlB,MACAK,KACAO,KACAD,GACFtB,SAAS,GA6HPkC,GACFV,OAAQA,EACRI,YAAaA,EACbO,MAAO,SAASjD,EAAagB,EAAO2B,GAClC,MAAOO,MAAKR,YAAY1C,EAAagB,EAAO2B,MAE9CI,MAAOA,EACPX,OAAQ,SAASe,GACf,MAAKA,IAEL/C,EAAES,OAAOuB,EAAQe,GAAjB/C,QAFoBgC,GAMxBgB,QAAOJ,WAAaA","file":"replicator.min.js","sourcesContent":["(function () {\n  'use strict';\n  // Data Stores\n  var sharedRegistry = {};\n  var sharedTraits = {};\n  var factoryCounts = {};\n  var config = {\n    enforce: true\n  };\n\n\n  function getAllTraitProps(factoryName, buildProps) {\n    var traitProps = {};\n\n    var traitNames = _.map(buildProps, function(val, key) { if (val === true) { return key; } });\n    _.each(traitNames, function(propName) {\n      var matchedTrait = getPropsForOneTrait(factoryName, propName);\n      if ( _.isObject(matchedTrait) ) {\n        _.extend(traitProps, matchedTrait);\n      }\n    });\n    return traitProps;\n  }\n\n  function enforce(definedProps, traitProps, props, factoryName) {\n    var propsMinusBuildLength = _.keys(_.extend({}, definedProps, traitProps));\n    // TODO: Check if xor is actually the thing we want...\n    var difference = _.xor(propsMinusBuildLength, _.keys(props));\n    if (difference.length) {\n      throw new Error(\n        'Couldn\\'t add unregistered attributes ' +\n        difference.join(',') +\n        ' in a build of factory ' +\n        factoryName\n      );\n    }\n  }\n\n  function getDefinedProps(factoryName) {\n    return sharedRegistry[factoryName];\n  }\n\n  function getOverrideProps(factoryName, props) {\n    return _.pickBy(props, function(propVal, propName) {\n      return !getPropsForOneTrait(factoryName, propName);\n    });\n  }\n\n  function getPropsForOneTrait(factoryName, trait) {\n    // Shouldn't be needed. Just to be paranoid.\n    sharedTraits[factoryName] = sharedTraits[factoryName] || {};\n    return sharedTraits[factoryName][trait];\n  }\n\n  function evaluateDynamicProperties(props, count) {\n    _.each(props, function(propVal, propName) {\n      if(_.isFunction(propVal)) {\n        props[propName] = propVal(props, count);\n      }\n    });\n  }\n\n  function calculateProps(factoryName, buildProps) {\n    var definedProps = getDefinedProps(factoryName);\n    var traitProps = getAllTraitProps(factoryName, buildProps);\n    var overrideProps = getOverrideProps(factoryName, buildProps);\n\n    var props = _.extend({}, definedProps, traitProps, overrideProps);\n    if (config.enforce) {\n      enforce(definedProps, traitProps, props, factoryName);\n    }\n\n    var count = factoryCounts[factoryName];\n    evaluateDynamicProperties(props, count);\n\n    factoryCounts[factoryName]++;\n\n    return props;\n  }\n\n  function define(factoryName, props) {\n    if ( !_.isString(factoryName) ) { throw new Error('A factory name is required.'); }\n    // check for props to be object\n    props = props || {};\n\n    var trait = function (traitName, traitProps) {\n      // enforce string for factoryName\n      // enforce object for props\n      sharedTraits[factoryName] = sharedTraits[factoryName] || {};\n      sharedTraits[factoryName][traitName] = traitProps;\n      return factory;\n    };\n\n    var factory = {\n      trait: trait\n    };\n\n    // Set on data store\n    sharedRegistry[factoryName] = props;\n    factoryCounts[factoryName] = 1;\n    sharedTraits[factoryName] = {};\n\n    return factory;\n  }\n\n  function makeFactory(factoryName, props, copies) {\n    copies = copies || 1;\n    if ( !_.isString(factoryName) ) {\n      throw new Error('A factory name is required.');\n    }\n    if ( !sharedRegistry[factoryName] ) {\n      throw new Error('Can\\'t build ' + factoryName + '. It has not been defined');\n    }\n\n    var result = [];\n    _.each(_.range(copies), function(){\n      result.push(calculateProps(factoryName, props));\n    });\n\n    if (copies === 1) { result = result[0]; }\n\n    return function(overrideProps) {\n      return overrideProps ? makeFactory(factoryName, overrideProps)() : result;\n    };\n  }\n\n  function embed(factoryName, props, copies) {\n    return function() {\n      return Replicator.build(factoryName, props, copies);\n    };\n  }\n\n  var Replicator = {\n    define: define,\n    makeFactory: makeFactory,\n    build: function(factoryName, props, copies) {\n      return this.makeFactory(factoryName, props, copies)();\n    },\n    embed: embed,\n    config: function(opts) {\n      if (!opts) { return config; }\n      // check opts for actual config keys\n      _.extend(config, opts);\n    }\n  };\n\n  window.Replicator = Replicator;\n})();\n"],"sourceRoot":"/source/"}