{"version":3,"sources":["replicator.min.js"],"names":["getAllTraitProps","factoryName","buildProps","traitProps","_","pickBy","propValue","each","propName","matchedTrait","getPropsForOneTrait","isObject","extend","enforce","definedProps","props","propsMinusBuildLength","keys","difference","xor","length","Error","join","getDefinedProps","sharedRegistry","getOverrideProps","propVal","trait","sharedTraits","evaluateDynamicProperties","count","isFunction","calculateProps","overrideProps","config","factoryCounts","define","isString","traitName","factory","makeFactory","copies","result","range","push","embed","Replicator","build","this","opts","window"],"mappings":"CAAA,WACE,YAUA,SAASA,GAAiBC,EAAaC,GACrC,GAAIC,KAUJ,OATAC,GAAEF,GACCG,OAAO,SAASC,GACjB,MAAOA,MAAc,IACpBC,KAAK,SAASD,EAAWE,GAC1B,GAAIC,GAAeC,EAAoBT,EAAaO,EAC/CJ,GAAEO,SAASF,IACdL,EAAEQ,OAAOT,EAAYM,KAGlBN,EAGT,QAASU,GAAQC,EAAcX,EAAYY,EAAOd,GAChD,GAAIe,GAAwBZ,EAAEa,KAAKb,EAAEQ,UAAWE,EAAcX,IAE1De,EAAad,EAAEe,IAAIH,EAAuBZ,EAAEa,KAAKF,GACrD,IAAIG,EAAWE,OACb,KAAM,IAAIC,OACR,yCACAH,EAAWI,KAAK,KAChB,0BACArB,GAKN,QAASsB,GAAgBtB,GACvB,MAAOuB,GAAevB,GAGxB,QAASwB,GAAiBxB,EAAac,GACrC,MAAOX,GAAEC,OAAOU,EAAO,SAASW,EAASlB,GACvC,OAAQE,EAAoBT,EAAaO,KAI7C,QAASE,GAAoBT,EAAa0B,GAGxC,MADAC,GAAa3B,GAAe2B,EAAa3B,OAClC2B,EAAa3B,GAAa0B,GAGnC,QAASE,GAA0Bd,EAAOe,GACxC1B,EAAEG,KAAKQ,EAAO,SAASW,EAASlB,GAC3BJ,EAAE2B,WAAWL,KACdX,EAAMP,GAAYkB,EAAQX,EAAOe,MAKvC,QAASE,GAAe/B,EAAaC,GACnC,GAAIY,GAAeS,EAAgBtB,GAC/BE,EAAaH,EAAiBC,EAAaC,GAC3C+B,EAAgBR,EAAiBxB,EAAaC,GAE9Ca,EAAQX,EAAEQ,UAAWE,EAAcX,EAAY8B,EAE/CC,GAAOrB,SACTA,EAAQC,EAAcX,EAAYY,EAAOd,EAG3C,IAAI6B,GAAQK,EAAclC,EAK1B,OAJA4B,GAA0Bd,EAAOe,GAEjCK,EAAclC,KAEPc,EAGT,QAASqB,GAAOnC,EAAac,GAC3B,IAAMX,EAAEiC,SAASpC,GAAiB,KAAM,IAAIoB,OAAM,8BAElDN,GAAQA,KAER,IAAIY,GAAQ,SAAUW,EAAWnC,GAK/B,MAFAyB,GAAa3B,GAAe2B,EAAa3B,OACzC2B,EAAa3B,GAAaqC,GAAanC,EAChCoC,GAGLA,GACFZ,MAAOA,EAQT,OAJAH,GAAevB,GAAec,EAC9BoB,EAAclC,GAAe,EAC7B2B,EAAa3B,MAENsC,EAGT,QAASC,GAAYvC,EAAac,EAAO0B,GAEvC,GADAA,EAASA,GAAU,GACbrC,EAAEiC,SAASpC,GACf,KAAM,IAAIoB,OAAM,8BAElB,KAAMG,EAAevB,GACnB,KAAM,IAAIoB,OAAM,eAAkBpB,EAAc,4BAGlD,IAAIyC,KAOJ,OANAtC,GAAEG,KAAKH,EAAEuC,MAAMF,GAAS,WACtBC,EAAOE,KAAKZ,EAAe/B,EAAac,MAG3B,IAAX0B,IAAgBC,EAASA,EAAO,IAE7B,SAAST,GACd,MAAOA,GAAgBO,EAAYvC,EAAagC,KAAmBS,GAIvE,QAASG,GAAM5C,EAAac,EAAO0B,GACjC,MAAO,YACL,MAAOK,GAAWC,MAAM9C,EAAac,EAAO0B,IA/HhD,GAAIjB,MACAI,KACAO,KACAD,GACFrB,SAAS,GA+HPiC,GACFV,OAAQA,EACRI,YAAaA,EACbO,MAAO,SAAS9C,EAAac,EAAO0B,GAClC,MAAOO,MAAKR,YAAYvC,EAAac,EAAO0B,MAE9CI,MAAOA,EACPX,OAAQ,SAASe,GACf,MAAKA,IAEL7C,EAAEQ,OAAOsB,EAAQe,GAAjB7C,QAFoB8B,GAMxBgB,QAAOJ,WAAaA","file":"replicator.min.js","sourcesContent":["(function () {\n  'use strict';\n  // Data Stores\n  var sharedRegistry = {};\n  var sharedTraits = {};\n  var factoryCounts = {};\n  var config = {\n    enforce: true\n  };\n\n\n  function getAllTraitProps(factoryName, buildProps) {\n    var traitProps = {};\n    _(buildProps)\n      .pickBy(function(propValue) {\n      return propValue === true;\n    }).each(function(propValue, propName) {\n      var matchedTrait = getPropsForOneTrait(factoryName, propName);\n      if ( _.isObject(matchedTrait) ) {\n        _.extend(traitProps, matchedTrait);\n      }\n    });\n    return traitProps;\n  }\n\n  function enforce(definedProps, traitProps, props, factoryName) {\n    var propsMinusBuildLength = _.keys(_.extend({}, definedProps, traitProps));\n    // TODO: Check if xor is actually the thing we want...\n    var difference = _.xor(propsMinusBuildLength, _.keys(props));\n    if (difference.length) {\n      throw new Error(\n        'Couldnn\\'t add unregistered attributes ' +\n        difference.join(',') +\n        ' in a build of factory ' +\n        factoryName\n      );\n    }\n  }\n\n  function getDefinedProps(factoryName) {\n    return sharedRegistry[factoryName];\n  }\n\n  function getOverrideProps(factoryName, props) {\n    return _.pickBy(props, function(propVal, propName) {\n      return !getPropsForOneTrait(factoryName, propName);\n    });\n  }\n\n  function getPropsForOneTrait(factoryName, trait) {\n    // Shouldn't be needed. Just to be paranoid.\n    sharedTraits[factoryName] = sharedTraits[factoryName] || {};\n    return sharedTraits[factoryName][trait];\n  }\n\n  function evaluateDynamicProperties(props, count) {\n    _.each(props, function(propVal, propName) {\n      if(_.isFunction(propVal)) {\n        props[propName] = propVal(props, count);\n      }\n    });\n  }\n\n  function calculateProps(factoryName, buildProps) {\n    var definedProps = getDefinedProps(factoryName);\n    var traitProps = getAllTraitProps(factoryName, buildProps);\n    var overrideProps = getOverrideProps(factoryName, buildProps);\n\n    var props = _.extend({}, definedProps, traitProps, overrideProps);\n\n    if (config.enforce) {\n      enforce(definedProps, traitProps, props, factoryName);\n    }\n\n    var count = factoryCounts[factoryName];\n    evaluateDynamicProperties(props, count);\n\n    factoryCounts[factoryName]++;\n\n    return props;\n  }\n\n  function define(factoryName, props) {\n    if ( !_.isString(factoryName) ) { throw new Error('A factory name is required.'); }\n    // check for props to be object\n    props = props || {};\n\n    var trait = function (traitName, traitProps) {\n      // enforce string for factoryName\n      // enforce object for props\n      sharedTraits[factoryName] = sharedTraits[factoryName] || {};\n      sharedTraits[factoryName][traitName] = traitProps;\n      return factory;\n    };\n\n    var factory = {\n      trait: trait\n    };\n\n    // Set on data store\n    sharedRegistry[factoryName] = props;\n    factoryCounts[factoryName] = 1;\n    sharedTraits[factoryName] = {};\n\n    return factory;\n  }\n\n  function makeFactory(factoryName, props, copies) {\n    copies = copies || 1;\n    if ( !_.isString(factoryName) ) {\n      throw new Error('A factory name is required.');\n    }\n    if ( !sharedRegistry[factoryName] ) {\n      throw new Error('Can\\'t build ' + factoryName + '. It has not been defined');\n    }\n\n    var result = [];\n    _.each(_.range(copies), function(){\n      result.push(calculateProps(factoryName, props));\n    });\n\n    if (copies === 1) { result = result[0]; }\n\n    return function(overrideProps) {\n      return overrideProps ? makeFactory(factoryName, overrideProps)() : result;\n    };\n  }\n\n  function embed(factoryName, props, copies) {\n    return function() {\n      return Replicator.build(factoryName, props, copies);\n    };\n  }\n\n  var Replicator = {\n    define: define,\n    makeFactory: makeFactory,\n    build: function(factoryName, props, copies) {\n      return this.makeFactory(factoryName, props, copies)();\n    },\n    embed: embed,\n    config: function(opts) {\n      if (!opts) { return config; }\n      // check opts for actual config keys\n      _.extend(config, opts);\n    }\n  };\n\n  window.Replicator = Replicator;\n})();\n"],"sourceRoot":"/source/"}